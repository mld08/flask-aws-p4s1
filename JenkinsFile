pipeline {
    agent any

    environment {
        IMAGE = 'mldiop08/flask-aws-p4s1' // Image Docker √† construire et √† pousser
        DOCKER_CREDENTIALS_ID = 'userprofile-credentials' // Replace with your Docker Hub credentials ID
        DOCKERHUB_USER = 'mldiop08' // Replace with your Docker Hub username
        DOCKER_CREDENTIALS = credentials('userprofile-credentials')  // Replace with your Docker Hub credentials ID
        SONARQUBE_URL = 'http://172.19.61.50:9000/' // Replace with your SonarQube URL
        SONARQUBE_TOKEN = credentials('SONAR_TOKEN') // Replace with your SonarQube token ID
    }

    stages {
        stage('Checkout') {
            steps {
                echo 'Clonage du d√©pot...'
                checkout scm
            }
        }

        stage('SonarQube Analysis') {
            steps {
                withSonarQubeEnv('SonarQube') {
                    echo 'Analyse SonarQube du code...'
                    sh "${tool 'SonarScanner'}/bin/sonar-scanner -Dsonar.projectKey=flask-aws-p4s1 -Dsonar.sources=./app -Dsonar.language=py -Dsonar.sourceEncoding=UTF-8"
                }
            }
        }

        stage('SonarQube Quality Gate') {
            steps {
                timeout(time: 5, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: true
                }
            }
        }


        stage('Docker Build') {
            steps {
                echo 'üî® Construction de l\'image Docker...'
                sh "docker build -t $IMAGE:latest ."
            }
        }

        stage('Trivy Scan') {
            steps {
                echo 'üîç Scan de l\'image avec Trivy...'
                sh "trivy image --exit-code 1 --severity CRITICAL $IMAGE:latest"
            }
        }

        stage('Docker Push') {
            steps {
                echo "üöÄ Envoi des images Docker sur Docker Hub"
                withCredentials([usernamePassword(credentialsId: 'userprofile-credentials', usernameVariable: 'DOCKERHUB_USER', passwordVariable: 'DOCKER_PASSWORD')]) {
                    sh '''
                        echo "$DOCKER_PASSWORD" | docker login -u "$DOCKERHUB_USER" --password-stdin
                        docker push $DOCKERHUB_USER/$IMAGE:latest
                    '''
                }
                echo "‚úÖ Images Docker envoy√©es avec succ√®s"
            }
        }

        stage('Deploy to Kubernetes') {
            steps {
                sh "kubectl apply -f k8s/deployment.yaml"
            }
        }
    }
}
